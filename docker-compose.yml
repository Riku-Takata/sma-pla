services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --save 60 1
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  web:
    build: 
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "5001:5001"
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DOCKER_ENV=True
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    volumes:
      - ./backend:/app
    depends_on:
      redis:
        condition: service_healthy
    restart: on-failure
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  notification:
    build: 
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "5002:5002"
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/0
      - BACKEND_URL=http://web:5001
      - DOCKER_ENV=True
      - PYTHONUNBUFFERED=1
    volumes:
      - ./frontend:/app
    depends_on:
      redis:
        condition: service_healthy
      web:
        condition: service_started
    restart: on-failure
    networks:
      - app-network

  ngrok:
    image: ngrok/ngrok:latest
    ports:
      - "4040:4040"
    env_file:
      - .env
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTH_TOKEN}
    command: 
      - "http"
      - "web:5001"
      - "--log"
      - "stdout"
    networks:
      - app-network
    depends_on:
      web:
        condition: service_started

networks:
  app-network:
    driver: bridge
    # 固定のサブネットを指定する（オプション）
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  redis-data:
    driver: local